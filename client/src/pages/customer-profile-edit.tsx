import React, { useState, useEffect } from "react";
import { useQuery, useMutation } from "@tanstack/react-query";
import { useLocation } from "wouter";
import { queryClient } from "@/lib/queryClient";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { useToast } from "@/hooks/use-toast";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage, FormDescription } from "@/components/ui/form";
import { ArrowLeft, Save, Shield, Phone, Mail, Building, MapPin, User } from "lucide-react";
import { useLanguage } from "@/contexts/LanguageContext";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";

// Schema for profile editing - includes all CRM fields
const createEditProfileSchema = (t: any) => z.object({
  firstName: z.string().min(1, t.firstName + " is required"),
  lastName: z.string().min(1, t.lastName + " is required"),
  phone: z.string().min(1, t.phone + " is required"),
  email: z.string().email("Invalid email").optional(),
  company: z.string().optional(),
  country: z.string().min(1, t.country + " is required"),
  province: z.string().min(1, "Province is required"),
  city: z.string().min(1, t.city + " is required"),
  address: z.string().min(1, t.address + " is required"),
  secondaryAddress: z.string().optional(),
  postalCode: z.string().optional(),
  alternatePhone: z.string().optional(),
  industry: z.string().optional(),
  businessType: z.string().optional(),
  companySize: z.string().optional(),
  communicationPreference: z.string().optional(),
  preferredLanguage: z.string().optional(),
  marketingConsent: z.boolean().optional(),
  notes: z.string().optional(),
  customerType: z.string().optional(),
  customerStatus: z.string().optional(),
  preferredPaymentMethod: z.string().optional(),
  creditLimit: z.string().optional(),
  website: z.string().optional(),
  taxId: z.string().optional(),
  registrationNumber: z.string().optional(),
  leadSource: z.string().optional(),
  assignedSalesRep: z.string().optional(),
  // Additional CRM fields
  annualRevenue: z.string().optional(),
  priceRange: z.string().optional(),
  orderFrequency: z.string().optional(),
  creditStatus: z.string().optional(),
  smsEnabled: z.boolean().optional(),
  emailEnabled: z.boolean().optional(),
});

const createSmsVerificationSchema = (t: any) => z.object({
  code: z.string().min(4, "Verification code must be at least 4 digits"),
});

export default function CustomerProfileEdit() {
  const [, setLocation] = useLocation();
  const { toast } = useToast();
  const { t, direction } = useLanguage();
  const [showSmsDialog, setShowSmsDialog] = useState(false);
  const [pendingChanges, setPendingChanges] = useState<any>(null);
  
  const editProfileSchema = createEditProfileSchema(t);
  const smsVerificationSchema = createSmsVerificationSchema(t);
  
  type EditProfileForm = z.infer<typeof editProfileSchema>;
  type SmsVerificationForm = z.infer<typeof smsVerificationSchema>;

  // Get parameters from query string
  const urlParams = new URLSearchParams(window.location.search);
  const customerId = urlParams.get('customerId');
  const mode = urlParams.get('mode'); // 'create' for new customer creation
  const isCreateMode = mode === 'create';
  
  // Fetch customer data - only if not in create mode
  const { data: customer, isLoading, error: customerError } = useQuery<any>({
    queryKey: customerId ? ["/api/crm/customers", customerId] : ["/api/customers/me"],
    queryFn: async () => {
      if (isCreateMode) return null; // Skip loading for create mode
      
      const endpoint = customerId ? `/api/crm/customers/${customerId}` : "/api/customers/me";
      const response = await fetch(endpoint, { credentials: 'include' });
      if (!response.ok) throw new Error('Failed to fetch customer data');
      const result = await response.json();
      return customerId ? result.data : result;
    },
    retry: 1,
    enabled: !isCreateMode, // Only fetch if not in create mode
  });

  // Fetch provinces data
  const { data: provincesData } = useQuery({
    queryKey: ["/api/logistics/provinces"],
    retry: 1,
  });

  // State for selected province to filter cities
  const [selectedProvinceId, setSelectedProvinceId] = useState<number | null>(null);

  // Fetch cities data based on selected province
  const { data: citiesData } = useQuery({
    queryKey: ["/api/logistics/cities", selectedProvinceId],
    queryFn: () => {
      const url = selectedProvinceId 
        ? `/api/logistics/cities?provinceId=${selectedProvinceId}`
        : '/api/logistics/cities';
      return fetch(url).then(res => res.json());
    },
    retry: 1,
  });

  const provinces = (provincesData && typeof provincesData === 'object' && 'data' in provincesData) ? provincesData.data : [];
  const cities = (citiesData && typeof citiesData === 'object' && 'data' in citiesData) ? citiesData.data : [];

  const form = useForm<EditProfileForm>({
    resolver: zodResolver(editProfileSchema),
    defaultValues: {
      firstName: "",
      lastName: "",
      phone: "",
      email: "",
      company: "",
      country: "",
      province: "",
      city: "",
      address: "",
      secondaryAddress: "",
      postalCode: "",
      alternatePhone: "",
      industry: "",
      businessType: "",
      companySize: "",
      communicationPreference: "",
      preferredLanguage: "",
      marketingConsent: false,
      notes: "",
      customerType: "",
      customerStatus: "",
      preferredPaymentMethod: "",
      creditLimit: "",
      website: "",
      taxId: "",
      registrationNumber: "",
      leadSource: "",
      assignedSalesRep: "",
      // Additional CRM fields
      annualRevenue: "",
      priceRange: "",
      orderFrequency: "",
      creditStatus: "",
      smsEnabled: false,
      emailEnabled: false,
    },
  });

  const smsForm = useForm<SmsVerificationForm>({
    resolver: zodResolver(smsVerificationSchema),
    defaultValues: {
      code: ""
    }
  });

  // Update form values when customer data is loaded
  useEffect(() => {
    if (customer?.customer) {
      const customerData = customer.customer;
      
      // Debug: Log customer data to check CRM fields
      console.log('üîç [UI DEBUG] Customer data loaded');
      console.log('üîç [CRM DEBUG] CRM Fields from API:', {
        annualRevenue: customerData.annualRevenue,
        priceRange: customerData.priceRange,
        orderFrequency: customerData.orderFrequency,
        creditStatus: customerData.creditStatus,
        smsEnabled: customerData.smsEnabled,
        emailEnabled: customerData.emailEnabled
      });
      console.log('üîç [VALUES] Actual CRM values:', 
        'annualRevenue=' + customerData.annualRevenue,
        'priceRange=' + customerData.priceRange,
        'orderFrequency=' + customerData.orderFrequency,
        'creditStatus=' + customerData.creditStatus,
        'smsEnabled=' + customerData.smsEnabled,
        'emailEnabled=' + customerData.emailEnabled
      );
      
      // Debug: Tax ID and Registration Number specifically
      console.log('üè¢ [TAX DEBUG] Tax & Registration from API:', {
        taxId: customerData.taxId,
        registrationNumber: customerData.registrationNumber
      });
      console.log('üè¢ [TAX VALUES] Actual values:', 
        'taxId=' + customerData.taxId,
        'registrationNumber=' + customerData.registrationNumber
      );
      
      form.reset({
        firstName: customerData.firstName || "",
        lastName: customerData.lastName || "",
        phone: customerData.phone || "",
        email: customerData.email || "",
        company: customerData.company || "",
        country: customerData.country || "",
        province: customerData.province || "",
        city: customerData.city || "",
        address: customerData.address || "",
        secondaryAddress: customerData.state || customerData.secondaryAddress || "",
        postalCode: customerData.postalCode || "",
        alternatePhone: customerData.alternatePhone || "",
        industry: customerData.industry || "",
        businessType: customerData.businessType || "",
        companySize: customerData.companySize || "",
        communicationPreference: customerData.communicationPreference || "",
        preferredLanguage: customerData.preferredLanguage || "",
        marketingConsent: customerData.marketingConsent || false,
        notes: customerData.publicNotes || customerData.notes || "",
        customerType: customerData.customerType || "",
        customerStatus: customerData.customerStatus || "",
        preferredPaymentMethod: customerData.preferredPaymentMethod || "",
        creditLimit: customerData.creditLimit ? customerData.creditLimit.toString() : "",
        website: customerData.website || "",
        taxId: customerData.taxId || "",
        registrationNumber: customerData.registrationNumber || "",

        leadSource: customerData.customerSource || customerData.leadSource || "",
        assignedSalesRep: customerData.assignedSalesRep || "",
        // Additional CRM fields
        annualRevenue: customerData.annualRevenue || "",
        priceRange: customerData.priceRange || "",
        orderFrequency: customerData.orderFrequency || "",
        creditStatus: customerData.creditStatus || "",
        smsEnabled: customerData.smsEnabled || false,
        emailEnabled: customerData.emailEnabled || false,
      });
      
      console.log('‚úÖ [UI DEBUG] Form reset completed with CRM values:', 
        'annualRevenue=' + (customerData.annualRevenue || ""),
        'priceRange=' + (customerData.priceRange || ""),
        'orderFrequency=' + (customerData.orderFrequency || ""),
        'creditStatus=' + (customerData.creditStatus || ""),
        'smsEnabled=' + (customerData.smsEnabled || false),
        'emailEnabled=' + (customerData.emailEnabled || false)
      );
      
      console.log('‚úÖ [TAX DEBUG] Form reset completed with Tax values:', 
        'taxId=' + (customerData.taxId || ""),
        'registrationNumber=' + (customerData.registrationNumber || "")
      );
    }
  }, [customer, form]);

  // Set selected province ID when provinces data and customer data are loaded
  useEffect(() => {
    if (customer?.customer?.province && provinces.length > 0) {
      // Try to find by English name first, then by Persian name
      const customerProvince = provinces.find((p: any) => 
        p.nameEnglish === customer.customer.province || 
        p.name === customer.customer.province ||
        p.namePersian === customer.customer.province
      );
      if (customerProvince) {
        setSelectedProvinceId(customerProvince.id);
        // Set form value to the standardized name to ensure CRM integration
        form.setValue('province', customerProvince.nameEnglish || customerProvince.name);
        console.log('üìç Province found and set:', customerProvince);
      } else {
        console.log('üìç Province not found for:', customer.customer.province, 'Available provinces:', provinces.map((p: any) => p.nameEnglish || p.name));
      }
    }
  }, [customer, provinces, form]);

  // Set selected city when cities data and customer data are loaded
  useEffect(() => {
    if (customer?.customer?.city && cities.length > 0) {
      const customerCity = cities.find((c: any) => 
        c.nameEnglish === customer.customer.city || 
        c.name === customer.customer.city ||
        c.namePersian === customer.customer.city
      );
      if (customerCity) {
        // Use standardized name for CRM integration
        form.setValue('city', customerCity.nameEnglish || customerCity.name);
        console.log('üèôÔ∏è City found and set:', customerCity);
      } else {
        // If not found in current city list, preserve original value to prevent data loss
        console.log('üèôÔ∏è City not found for:', customer.customer.city, 'Preserving original value');
        form.setValue('city', customer.customer.city);
      }
    }
  }, [customer, cities, form]);

  // Send SMS verification code
  const sendSmsCodeMutation = useMutation({
    mutationFn: async (phone: string) => {
      const response = await fetch('/api/sms/send-verification', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ phone }),
        credentials: 'include'
      });
      if (!response.ok) {
        throw new Error('Failed to send SMS');
      }
      return response.json();
    },
    onSuccess: () => {
      toast({
        title: t.loading,
        description: "SMS verification code sent successfully",
      });
    },
    onError: (error: any) => {
      toast({
        variant: "destructive",
        title: t.error,
        description: error.message || "Failed to send SMS verification",
      });
    }
  });

  // Update profile with SMS verification
  const verifySmsAndUpdateMutation = useMutation({
    mutationFn: async ({ code, profileData }: { code: string; profileData: EditProfileForm }) => {
      const response = await fetch('/api/customers/verify-and-update', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ verificationCode: code, ...profileData }),
        credentials: 'include'
      });
      if (!response.ok) {
        throw new Error('Verification failed');
      }
      return response.json();
    },
    onSuccess: () => {
      toast({
        title: t.save,
        description: "Profile updated successfully",
      });
      queryClient.invalidateQueries({ queryKey: ["/api/customers/me"] });
      setShowSmsDialog(false);
      setPendingChanges(null);
      setLocation("/customer/profile");
    },
    onError: (error: any) => {
      toast({
        variant: "destructive",
        title: t.error,
        description: error.message || "Profile update failed",
      });
    }
  });

  // Create new customer mutation
  const createCustomerMutation = useMutation({
    mutationFn: async (data: EditProfileForm) => {
      console.log('üì§ [FRONTEND] Creating new customer:', data);
      
      const response = await fetch('/api/crm/customers', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(data),
        credentials: 'include'
      });
      if (!response.ok) {
        throw new Error('Customer creation failed');
      }
      return response.json();
    },
    onSuccess: () => {
      toast({
        title: "ŸÖŸàŸÅŸÇ€åÿ™",
        description: "ŸÖÿ¥ÿ™ÿ±€å ÿ¨ÿØ€åÿØ ÿ®ÿß ŸÖŸàŸÅŸÇ€åÿ™ ÿß€åÿ¨ÿßÿØ ÿ¥ÿØ",
      });
      queryClient.invalidateQueries({ queryKey: ["/api/crm/customers"] });
      setLocation("/admin/crm");
    },
    onError: (error: any) => {
      toast({
        variant: "destructive",
        title: "ÿÆÿ∑ÿß",
        description: error.message || "ÿß€åÿ¨ÿßÿØ ŸÖÿ¥ÿ™ÿ±€å ŸÜÿßŸÖŸàŸÅŸÇ ÿ®ŸàÿØ",
      });
    }
  });

  // Update profile without SMS (if no phone change)
  const updateProfileMutation = useMutation({
    mutationFn: async (data: EditProfileForm) => {
      console.log('üì§ [FRONTEND] Sending profile update data:', data);
      
      // Choose the appropriate endpoint based on whether we're editing from CRM or customer portal
      const endpoint = customerId ? `/api/crm/customers/${customerId}` : '/api/customers/profile';
      
      const response = await fetch(endpoint, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(data),
        credentials: 'include'
      });
      if (!response.ok) {
        throw new Error('Update failed');
      }
      return response.json();
    },
    onSuccess: () => {
      toast({
        title: t.save,
        description: "Profile updated successfully",
      });
      // Invalidate appropriate cache
      if (customerId) {
        queryClient.invalidateQueries({ queryKey: ["/api/crm/customers", customerId] });
        queryClient.invalidateQueries({ queryKey: ["/api/crm/customers"] });
        setLocation("/admin/crm");
      } else {
        queryClient.invalidateQueries({ queryKey: ["/api/customers/me"] });
        setLocation("/customer/profile");
      }
    },
    onError: (error: any) => {
      toast({
        variant: "destructive",
        title: t.error,
        description: error.message || "Profile update failed",
      });
    }
  });

  const onSubmit = (data: EditProfileForm) => {
    if (isCreateMode) {
      // Creating new customer
      createCustomerMutation.mutate(data);
    } else {
      // Updating existing customer
      // Check if phone number changed
      const currentPhone = customer?.customer?.phone;
      const newPhone = data.phone;
      
      if (currentPhone !== newPhone) {
        // Phone changed, require SMS verification
        setPendingChanges(data);
        sendSmsCodeMutation.mutate(newPhone);
        setShowSmsDialog(true);
      } else {
        // No phone change, update directly
        updateProfileMutation.mutate(data);
      }
    }
  };

  const onSmsVerify = (data: SmsVerificationForm) => {
    if (pendingChanges) {
      verifySmsAndUpdateMutation.mutate({
        code: data.code,
        profileData: pendingChanges
      });
    }
  };

  if (isLoading) {
    return (
      <div className={`container mx-auto py-8 ${direction === 'rtl' ? 'rtl' : 'ltr'}`}>
        <div className="flex items-center justify-center">
          <div className="text-lg">{t.loading}</div>
        </div>
      </div>
    );
  }

  // Check for authentication errors or missing data
  if (customerError || (!isLoading && (!customer || !customer.success))) {
    return (
      <div className={`min-h-screen bg-gray-50 flex items-center justify-center ${direction === 'rtl' ? 'rtl' : 'ltr'}`}>
        <Card className="w-full max-w-md">
          <CardContent className="p-8 text-center">
            <Shield className="w-16 h-16 text-gray-300 mx-auto mb-4" />
            <h2 className="text-xl font-semibold text-gray-700 mb-2">{t.error}</h2>
            <p className="text-gray-500 mb-6">{t.loginToAccessWallet}</p>
            <div className="space-y-3">
              <Button onClick={() => setLocation("/customer/login")} className="w-full">
                {t.login}
              </Button>
              <Button onClick={() => setLocation("/shop")} variant="outline" className="w-full">
                {t.continueShopping}
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className={`min-h-screen bg-gray-50 py-8 ${direction === 'rtl' ? 'rtl' : 'ltr'}`}>
      <div className="container mx-auto px-4">
        {/* Header */}
        <div className="mb-6 flex items-center gap-4">
          <Button
            variant="outline"
            size="sm"
            onClick={() => setLocation(isCreateMode || customerId ? "/admin/crm" : "/customer/profile")}
            className="flex items-center gap-2"
          >
            <ArrowLeft className={`h-4 w-4 ${direction === 'rtl' ? 'rotate-180' : ''}`} />
            {isCreateMode || customerId ? "ÿ®ÿßÿ≤⁄Øÿ¥ÿ™ ÿ®Ÿá CRM" : t.cancel}
          </Button>
          <div>
            <h1 className="text-2xl font-bold text-gray-900">
              {isCreateMode ? "ÿß€åÿ¨ÿßÿØ ŸÖÿ¥ÿ™ÿ±€å ÿ¨ÿØ€åÿØ (CRM)" : (customerId ? "Ÿà€åÿ±ÿß€åÿ¥ ŸÖÿ¥ÿ™ÿ±€å (CRM)" : t.editProfile)}
            </h1>
            <p className="text-gray-600">
              {isCreateMode ? "ÿß€åÿ¨ÿßÿØ ŸÖÿ¥ÿ™ÿ±€å ÿ¨ÿØ€åÿØ ÿßÿ≤ ÿ∑ÿ±€åŸÇ ÿ≥€åÿ≥ÿ™ŸÖ CRM" : (customerId ? "Ÿà€åÿ±ÿß€åÿ¥ ÿßÿ∑ŸÑÿßÿπÿßÿ™ ŸÖÿ¥ÿ™ÿ±€å ÿßÿ≤ ÿ∑ÿ±€åŸÇ ÿ≥€åÿ≥ÿ™ŸÖ CRM" : t.manageAccount)}
            </p>
          </div>
        </div>

        {/* Edit Form */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Shield className="h-5 w-5" />
              {t.accountInformation}
            </CardTitle>
            <CardDescription>
              {t.manageAccount}
            </CardDescription>
          </CardHeader>
          <CardContent>
            <Form {...form}>
              <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
                {/* Name Fields */}
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <FormField
                    control={form.control}
                    name="firstName"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>ŸÜÿßŸÖ</FormLabel>
                        <FormControl>
                          <Input {...field} placeholder="ŸÜÿßŸÖ" />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={form.control}
                    name="lastName"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>ŸÜÿßŸÖ ÿÆÿßŸÜŸàÿßÿØ⁄Ø€å</FormLabel>
                        <FormControl>
                          <Input {...field} placeholder="ŸÜÿßŸÖ ÿÆÿßŸÜŸàÿßÿØ⁄Ø€å" />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>

                {/* Contact Fields */}
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <FormField
                    control={form.control}
                    name="phone"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel className="flex items-center gap-2">
                          <Phone className="h-4 w-4" />
                          ÿ¥ŸÖÿßÿ±Ÿá ÿ™ŸÑŸÅŸÜ
                        </FormLabel>
                        <FormControl>
                          <Input {...field} readOnly={!isCreateMode} className={isCreateMode ? "" : "bg-gray-50"} placeholder={isCreateMode ? "ÿ¥ŸÖÿßÿ±Ÿá ÿ™ŸÑŸÅŸÜ" : ""} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={form.control}
                    name="email"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel className="flex items-center gap-2">
                          <Mail className="h-4 w-4" />
                          ÿß€åŸÖ€åŸÑ
                        </FormLabel>
                        <FormControl>
                          <Input {...field} type="email" placeholder="ÿ¢ÿØÿ±ÿ≥ ÿß€åŸÖ€åŸÑ" readOnly={!isCreateMode} className={isCreateMode ? "" : "bg-gray-50"} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>

                {/* Company Field */}
                <FormField
                  control={form.control}
                  name="company"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel className="flex items-center gap-2">
                        <Building className="h-4 w-4" />
                        ŸÜÿßŸÖ ÿ¥ÿ±⁄©ÿ™
                      </FormLabel>
                      <FormControl>
                        <Input {...field} placeholder="ŸÜÿßŸÖ ÿ¥ÿ±⁄©ÿ™ (ÿßÿÆÿ™€åÿßÿ±€å)" />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                {/* Address Section */}
                <div className="space-y-4">
                  <h3 className="text-lg font-semibold text-gray-900">ÿßÿ∑ŸÑÿßÿπÿßÿ™ ÿ¢ÿØÿ±ÿ≥</h3>
                  
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <FormField
                      control={form.control}
                      name="country"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>⁄©ÿ¥Ÿàÿ±</FormLabel>
                          <FormControl>
                            <Input {...field} placeholder="⁄©ÿ¥Ÿàÿ±" />
                          </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={form.control}
                    name="province"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Province / ŸÖÿ≠ÿßŸÅÿ∏ÿ©</FormLabel>
                        <Select 
                          onValueChange={(value) => {
                            console.log('üèõÔ∏è Province changing to:', value);
                            field.onChange(value);
                            // Find the selected province to get its ID for city filtering
                            const selectedProvince = provinces.find((p: any) => p.nameEnglish === value || p.name === value);
                            if (selectedProvince) {
                              setSelectedProvinceId(selectedProvince.id);
                              console.log('üèõÔ∏è Province ID set to:', selectedProvince.id);
                            }
                            // Don't clear city automatically - preserve data integrity
                            console.log('üèõÔ∏è City preserved, will filter based on new province');
                          }} 
                          value={field.value}
                        >
                          <FormControl>
                            <SelectTrigger>
                              <SelectValue placeholder="Select province / ÿßÿÆÿ™ÿ± ÿßŸÑŸÖÿ≠ÿßŸÅÿ∏ÿ©" />
                            </SelectTrigger>
                          </FormControl>
                          <SelectContent>
                            {provinces.map((province: any) => (
                              <SelectItem key={province.id} value={province.nameEnglish}>
                                {province.nameEnglish} / {province.nameArabic}
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={form.control}
                    name="city"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>City / ŸÖÿØŸäŸÜÿ©</FormLabel>
                        <Select onValueChange={field.onChange} value={field.value}>
                          <FormControl>
                            <SelectTrigger>
                              <SelectValue placeholder="Select city / ÿßÿÆÿ™ÿ± ÿßŸÑŸÖÿØŸäŸÜÿ©" />
                            </SelectTrigger>
                          </FormControl>
                          <SelectContent>
                            {cities.map((city: any) => (
                              <SelectItem key={city.id} value={city.nameEnglish}>
                                {city.nameEnglish} / {city.nameArabic}
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>

                  <FormField
                    control={form.control}
                    name="address"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel className="flex items-center gap-2">
                          <MapPin className="h-4 w-4" />
                          ÿ¢ÿØÿ±ÿ≥ ⁄©ÿßŸÖŸÑ
                        </FormLabel>
                        <FormControl>
                          <Textarea {...field} placeholder="ÿ¢ÿØÿ±ÿ≥ ⁄©ÿßŸÖŸÑ" rows={3} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <FormField
                      control={form.control}
                      name="secondaryAddress"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>ÿ¢ÿØÿ±ÿ≥ ÿØŸàŸÖ (ÿßÿÆÿ™€åÿßÿ±€å)</FormLabel>
                          <FormControl>
                            <Input {...field} placeholder="ÿ¢ÿØÿ±ÿ≥ ÿØŸàŸÖ €åÿß ŸÖÿ≠ŸÑ ⁄©ÿßÿ±" />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={form.control}
                      name="postalCode"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>⁄©ÿØ Ÿæÿ≥ÿ™€å</FormLabel>
                          <FormControl>
                            <Input {...field} placeholder="⁄©ÿØ Ÿæÿ≥ÿ™€å" />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                  </div>
                </div>

                {/* Additional Contact Information */}
                <div className="space-y-4">
                  <h3 className="text-lg font-semibold text-gray-900">ÿßÿ∑ŸÑÿßÿπÿßÿ™ ÿ™ŸÖÿßÿ≥ ÿ™⁄©ŸÖ€åŸÑ€å</h3>
                  
                  <FormField
                    control={form.control}
                    name="alternatePhone"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>ÿ¥ŸÖÿßÿ±Ÿá ÿ™ŸÑŸÅŸÜ ÿØŸàŸÖ (ÿßÿÆÿ™€åÿßÿ±€å)</FormLabel>
                        <FormControl>
                          <Input {...field} placeholder="ÿ¥ŸÖÿßÿ±Ÿá ÿ™ŸÑŸÅŸÜ ÿ´ÿßÿ®ÿ™ €åÿß ŸáŸÖÿ±ÿßŸá ÿØŸàŸÖ" />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>

                {/* Business Information */}
                <div className="space-y-4">
                  <h3 className="text-lg font-semibold text-gray-900">ÿßÿ∑ŸÑÿßÿπÿßÿ™ ÿ™ÿ¨ÿßÿ±€å</h3>
                  
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <FormField
                      control={form.control}
                      name="industry"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>ÿµŸÜÿπÿ™ ŸÅÿπÿßŸÑ€åÿ™</FormLabel>
                          <Select onValueChange={field.onChange} value={field.value}>
                            <FormControl>
                              <SelectTrigger>
                                <SelectValue placeholder="ÿßŸÜÿ™ÿÆÿßÿ® ÿµŸÜÿπÿ™" />
                              </SelectTrigger>
                            </FormControl>
                            <SelectContent>
                              <SelectItem value="chemical">ÿ¥€åŸÖ€åÿß€å€å</SelectItem>
                              <SelectItem value="petrochemical">Ÿæÿ™ÿ±Ÿàÿ¥€åŸÖ€å</SelectItem>
                              <SelectItem value="pharmaceutical">ÿØÿßÿ±Ÿà€å€å</SelectItem>
                              <SelectItem value="agriculture">⁄©ÿ¥ÿßŸàÿ±ÿ≤€å</SelectItem>
                              <SelectItem value="construction">ÿ≥ÿßÿÆÿ™ŸÖÿßŸÜ</SelectItem>
                              <SelectItem value="automotive">ÿÆŸàÿØÿ±Ÿà€å€å</SelectItem>
                              <SelectItem value="textile">ŸÜÿ≥ÿßÿ¨€å</SelectItem>
                              <SelectItem value="food">ŸÖŸàÿßÿØ ÿ∫ÿ∞ÿß€å€å</SelectItem>
                              <SelectItem value="water_treatment">ÿ™ÿµŸÅ€åŸá ÿ¢ÿ®</SelectItem>
                              <SelectItem value="paint">ÿ±ŸÜ⁄Ø Ÿà ÿ±ÿ≤€åŸÜ</SelectItem>
                              <SelectItem value="other">ÿ≥ÿß€åÿ±</SelectItem>
                            </SelectContent>
                          </Select>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={form.control}
                      name="businessType"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>ŸÜŸàÿπ ⁄©ÿ≥ÿ® Ÿà ⁄©ÿßÿ±</FormLabel>
                          <Select onValueChange={field.onChange} value={field.value}>
                            <FormControl>
                              <SelectTrigger>
                                <SelectValue placeholder="ÿßŸÜÿ™ÿÆÿßÿ® ŸÜŸàÿπ ⁄©ÿ≥ÿ® Ÿà ⁄©ÿßÿ±" />
                              </SelectTrigger>
                            </FormControl>
                            <SelectContent>
                              <SelectItem value="manufacturer">ÿ™ŸàŸÑ€åÿØ⁄©ŸÜŸÜÿØŸá</SelectItem>
                              <SelectItem value="distributor">ÿ™Ÿàÿ≤€åÿπ ⁄©ŸÜŸÜÿØŸá</SelectItem>
                              <SelectItem value="retailer">ÿÆÿ±ÿØŸá ŸÅÿ±Ÿàÿ¥</SelectItem>
                              <SelectItem value="service_provider">ÿßÿ±ÿßÿ¶Ÿá ÿØŸáŸÜÿØŸá ÿÆÿØŸÖÿßÿ™</SelectItem>
                              <SelectItem value="research">ÿ™ÿ≠ŸÇ€åŸÇ Ÿà ÿ™Ÿàÿ≥ÿπŸá</SelectItem>
                              <SelectItem value="consultant">ŸÖÿ¥ÿßŸàÿ±</SelectItem>
                              <SelectItem value="end_user">ŸÖÿµÿ±ŸÅ ⁄©ŸÜŸÜÿØŸá ŸÜŸáÿß€å€å</SelectItem>
                            </SelectContent>
                          </Select>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <FormField
                      control={form.control}
                      name="companySize"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>ÿßŸÜÿØÿßÿ≤Ÿá ÿ¥ÿ±⁄©ÿ™</FormLabel>
                          <Select onValueChange={field.onChange} value={field.value}>
                            <FormControl>
                              <SelectTrigger>
                                <SelectValue placeholder="ÿßŸÜÿ™ÿÆÿßÿ® ÿßŸÜÿØÿßÿ≤Ÿá ÿ¥ÿ±⁄©ÿ™" />
                              </SelectTrigger>
                            </FormControl>
                            <SelectContent>
                              <SelectItem value="1-10">1-10 ŸÜŸÅÿ±</SelectItem>
                              <SelectItem value="11-50">11-50 ŸÜŸÅÿ±</SelectItem>
                              <SelectItem value="51-200">51-200 ŸÜŸÅÿ±</SelectItem>
                              <SelectItem value="201-500">201-500 ŸÜŸÅÿ±</SelectItem>
                              <SelectItem value="500+">ÿ®€åÿ¥ ÿßÿ≤ 500 ŸÜŸÅÿ±</SelectItem>
                            </SelectContent>
                          </Select>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={form.control}
                      name="website"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Ÿàÿ® ÿ≥ÿß€åÿ™ ÿ¥ÿ±⁄©ÿ™</FormLabel>
                          <FormControl>
                            <Input {...field} placeholder="https://www.example.com" />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <FormField
                      control={form.control}
                      name="taxId"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>ÿ¥ŸÜÿßÿ≥Ÿá ŸÖÿßŸÑ€åÿßÿ™€å</FormLabel>
                          <FormControl>
                            <Input {...field} placeholder="ÿ¥ŸÜÿßÿ≥Ÿá ŸÖÿßŸÑ€åÿßÿ™€å ÿ¥ÿ±⁄©ÿ™" />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={form.control}
                      name="registrationNumber"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>ÿ¥ŸÖÿßÿ±Ÿá ÿ´ÿ®ÿ™ ÿ¥ÿ±⁄©ÿ™</FormLabel>
                          <FormControl>
                            <Input {...field} placeholder="ÿ¥ŸÖÿßÿ±Ÿá ÿ´ÿ®ÿ™ ÿ±ÿ≥ŸÖ€å ÿ¥ÿ±⁄©ÿ™" />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                  </div>
                </div>

                {/* Customer Management */}
                <div className="space-y-4">
                  <h3 className="text-lg font-semibold text-gray-900">ÿ™ŸÜÿ∏€åŸÖÿßÿ™ ŸÖÿ¥ÿ™ÿ±€å</h3>
                  
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <FormField
                      control={form.control}
                      name="customerType"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>ŸÜŸàÿπ ŸÖÿ¥ÿ™ÿ±€å</FormLabel>
                          <Select onValueChange={field.onChange} value={field.value}>
                            <FormControl>
                              <SelectTrigger>
                                <SelectValue placeholder="ÿßŸÜÿ™ÿÆÿßÿ® ŸÜŸàÿπ ŸÖÿ¥ÿ™ÿ±€å" />
                              </SelectTrigger>
                            </FormControl>
                            <SelectContent>
                              <SelectItem value="regular">ÿπÿßÿØ€å</SelectItem>
                              <SelectItem value="vip">VIP</SelectItem>
                              <SelectItem value="wholesale">ÿπŸÖÿØŸá ŸÅÿ±Ÿàÿ¥€å</SelectItem>
                              <SelectItem value="retail">ÿÆÿ±ÿØŸá ŸÅÿ±Ÿàÿ¥€å</SelectItem>
                              <SelectItem value="industrial">ÿµŸÜÿπÿ™€å</SelectItem>
                            </SelectContent>
                          </Select>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={form.control}
                      name="preferredPaymentMethod"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>ÿ±Ÿàÿ¥ Ÿæÿ±ÿØÿßÿÆÿ™ ÿ™ÿ±ÿ¨€åÿ≠€å</FormLabel>
                          <Select onValueChange={field.onChange} value={field.value}>
                            <FormControl>
                              <SelectTrigger>
                                <SelectValue placeholder="ÿßŸÜÿ™ÿÆÿßÿ® ÿ±Ÿàÿ¥ Ÿæÿ±ÿØÿßÿÆÿ™" />
                              </SelectTrigger>
                            </FormControl>
                            <SelectContent>
                              <SelectItem value="cash">ŸÜŸÇÿØ€å</SelectItem>
                              <SelectItem value="bank_transfer">ÿ≠ŸàÿßŸÑŸá ÿ®ÿßŸÜ⁄©€å</SelectItem>
                              <SelectItem value="check">⁄Ü⁄©</SelectItem>
                              <SelectItem value="credit">ÿßÿπÿ™ÿ®ÿßÿ±€å</SelectItem>
                              <SelectItem value="installment">ŸÇÿ≥ÿ∑€å</SelectItem>
                            </SelectContent>
                          </Select>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <FormField
                      control={form.control}
                      name="creditLimit"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>ÿ≠ÿØ ÿßÿπÿ™ÿ®ÿßÿ± (IQD)</FormLabel>
                          <FormControl>
                            <Input {...field} placeholder="ŸÖŸÇÿØÿßÿ± ÿ≠ÿØ ÿßÿπÿ™ÿ®ÿßÿ±" type="number" />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={form.control}
                      name="leadSource"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>ŸÖŸÜÿ®ÿπ ŸÖÿ¥ÿ™ÿ±€å</FormLabel>
                          <Select onValueChange={field.onChange} value={field.value}>
                            <FormControl>
                              <SelectTrigger>
                                <SelectValue placeholder="⁄Ü⁄ØŸàŸÜŸá ŸÖÿß ÿ±ÿß Ÿæ€åÿØÿß ⁄©ÿ±ÿØ€åÿØÿü" />
                              </SelectTrigger>
                            </FormControl>
                            <SelectContent>
                              <SelectItem value="website">Ÿàÿ® ÿ≥ÿß€åÿ™</SelectItem>
                              <SelectItem value="referral">ŸÖÿπÿ±ŸÅ€å</SelectItem>
                              <SelectItem value="social_media">ÿ¥ÿ®⁄©Ÿá Ÿáÿß€å ÿßÿ¨ÿ™ŸÖÿßÿπ€å</SelectItem>
                              <SelectItem value="advertising">ÿ™ÿ®ŸÑ€åÿ∫ÿßÿ™</SelectItem>
                              <SelectItem value="exhibition">ŸÜŸÖÿß€åÿ¥⁄ØÿßŸá</SelectItem>
                              <SelectItem value="cold_call">ÿ™ŸÖÿßÿ≥ ÿ≥ÿ±ÿØ</SelectItem>
                              <SelectItem value="other">ÿ≥ÿß€åÿ±</SelectItem>
                            </SelectContent>
                          </Select>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                  </div>
                </div>

                {/* Preferences */}
                <div className="space-y-4">
                  <h3 className="text-lg font-semibold text-gray-900">ÿ™ŸÜÿ∏€åŸÖÿßÿ™ ⁄©ÿßÿ±ÿ®ÿ±€å</h3>
                  
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <FormField
                      control={form.control}
                      name="preferredLanguage"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>ÿ≤ÿ®ÿßŸÜ ÿ™ÿ±ÿ¨€åÿ≠€å</FormLabel>
                          <Select onValueChange={field.onChange} value={field.value}>
                            <FormControl>
                              <SelectTrigger>
                                <SelectValue placeholder="ÿßŸÜÿ™ÿÆÿßÿ® ÿ≤ÿ®ÿßŸÜ" />
                              </SelectTrigger>
                            </FormControl>
                            <SelectContent>
                              <SelectItem value="persian">ŸÅÿßÿ±ÿ≥€å</SelectItem>
                              <SelectItem value="arabic">ÿπÿ±ÿ®€å</SelectItem>
                              <SelectItem value="english">ÿßŸÜ⁄ØŸÑ€åÿ≥€å</SelectItem>
                              <SelectItem value="kurdish">⁄©ÿ±ÿØ€å</SelectItem>
                            </SelectContent>
                          </Select>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={form.control}
                      name="communicationPreference"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>ÿ±Ÿàÿ¥ ÿßÿ±ÿ™ÿ®ÿßÿ∑ ÿ™ÿ±ÿ¨€åÿ≠€å</FormLabel>
                          <Select onValueChange={field.onChange} value={field.value}>
                            <FormControl>
                              <SelectTrigger>
                                <SelectValue placeholder="ÿßŸÜÿ™ÿÆÿßÿ® ÿ±Ÿàÿ¥ ÿßÿ±ÿ™ÿ®ÿßÿ∑" />
                              </SelectTrigger>
                            </FormControl>
                            <SelectContent>
                              <SelectItem value="phone">ÿ™ŸÑŸÅŸÜ</SelectItem>
                              <SelectItem value="email">ÿß€åŸÖ€åŸÑ</SelectItem>
                              <SelectItem value="sms">Ÿæ€åÿßŸÖ⁄©</SelectItem>
                              <SelectItem value="whatsapp">Ÿàÿßÿ™ÿ≥ÿßŸæ</SelectItem>
                              <SelectItem value="telegram">ÿ™ŸÑ⁄Øÿ±ÿßŸÖ</SelectItem>
                            </SelectContent>
                          </Select>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                  </div>

                  <FormField
                    control={form.control}
                    name="marketingConsent"
                    render={({ field }) => (
                      <FormItem className="flex flex-row items-start space-x-3 space-y-0">
                        <FormControl>
                          <input
                            type="checkbox"
                            checked={field.value}
                            onChange={field.onChange}
                            className="mt-2"
                          />
                        </FormControl>
                        <div className="space-y-1 leading-none">
                          <FormLabel>
                            ŸÖŸàÿßŸÅŸÇÿ™ ÿ®ÿß ÿØÿ±€åÿßŸÅÿ™ ÿßÿ∑ŸÑÿßÿπÿßÿ™ ÿ®ÿßÿ≤ÿßÿ±€åÿßÿ®€å
                          </FormLabel>
                          <FormDescription>
                            ÿß⁄Øÿ± ŸÖŸàÿßŸÅŸÇ Ÿáÿ≥ÿ™€åÿØÿå ÿßÿ∑ŸÑÿßÿπÿßÿ™ ŸÖÿ≠ÿµŸàŸÑÿßÿ™ ÿ¨ÿØ€åÿØ Ÿà Ÿæ€åÿ¥ŸÜŸáÿßÿØÿßÿ™ Ÿà€å⁄òŸá ÿ±ÿß ÿ®ÿ±ÿß€å ÿ¥ŸÖÿß ÿßÿ±ÿ≥ÿßŸÑ ÿÆŸàÿßŸá€åŸÖ ⁄©ÿ±ÿØ.
                          </FormDescription>
                        </div>
                      </FormItem>
                    )}
                  />
                </div>

                {/* Additional CRM Fields */}
                <div className="space-y-4">
                  <h3 className="text-lg font-semibold text-gray-900">ÿßÿ∑ŸÑÿßÿπÿßÿ™ ÿ™⁄©ŸÖ€åŸÑ€å CRM</h3>
                  
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <FormField
                      control={form.control}
                      name="annualRevenue"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>ÿØÿ±ÿ¢ŸÖÿØ ÿ≥ÿßŸÑÿßŸÜŸá ÿ™ŸÇÿ±€åÿ®€å</FormLabel>
                          <Select onValueChange={field.onChange} value={field.value}>
                            <FormControl>
                              <SelectTrigger>
                                <SelectValue placeholder="ÿßŸÜÿ™ÿÆÿßÿ® ÿØÿ±ÿ¢ŸÖÿØ ÿ≥ÿßŸÑÿßŸÜŸá" />
                              </SelectTrigger>
                            </FormControl>
                            <SelectContent>
                              <SelectItem value="under_100m">⁄©ŸÖÿ™ÿ± ÿßÿ≤ 100 ŸÖ€åŸÑ€åŸàŸÜ ÿØ€åŸÜÿßÿ±</SelectItem>
                              <SelectItem value="100m_500m">100 ÿ™ÿß 500 ŸÖ€åŸÑ€åŸàŸÜ ÿØ€åŸÜÿßÿ±</SelectItem>
                              <SelectItem value="500m_1b">500 ŸÖ€åŸÑ€åŸàŸÜ ÿ™ÿß 1 ŸÖ€åŸÑ€åÿßÿ±ÿØ ÿØ€åŸÜÿßÿ±</SelectItem>
                              <SelectItem value="1b_5b">1 ÿ™ÿß 5 ŸÖ€åŸÑ€åÿßÿ±ÿØ ÿØ€åŸÜÿßÿ±</SelectItem>
                              <SelectItem value="over_5b">ÿ®€åÿ¥ ÿßÿ≤ 5 ŸÖ€åŸÑ€åÿßÿ±ÿØ ÿØ€åŸÜÿßÿ±</SelectItem>
                              <SelectItem value="confidential">ŸÖÿ≠ÿ±ŸÖÿßŸÜŸá</SelectItem>
                            </SelectContent>
                          </Select>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={form.control}
                      name="priceRange"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>ÿ®ÿßÿ≤Ÿá ŸÇ€åŸÖÿ™ ŸÖŸàÿ±ÿØ ÿπŸÑÿßŸÇŸá</FormLabel>
                          <Select onValueChange={field.onChange} value={field.value}>
                            <FormControl>
                              <SelectTrigger>
                                <SelectValue placeholder="ÿßŸÜÿ™ÿÆÿßÿ® ÿ®ÿßÿ≤Ÿá ŸÇ€åŸÖÿ™" />
                              </SelectTrigger>
                            </FormControl>
                            <SelectContent>
                              <SelectItem value="budget">ÿßŸÇÿ™ÿµÿßÿØ€å (ÿ≤€åÿ± 50 Ÿáÿ≤ÿßÿ± ÿØ€åŸÜÿßÿ±)</SelectItem>
                              <SelectItem value="mid_range">ŸÖÿ™Ÿàÿ≥ÿ∑ (50-200 Ÿáÿ≤ÿßÿ± ÿØ€åŸÜÿßÿ±)</SelectItem>
                              <SelectItem value="premium">ÿ®ÿßŸÑÿß (200-500 Ÿáÿ≤ÿßÿ± ÿØ€åŸÜÿßÿ±)</SelectItem>
                              <SelectItem value="enterprise">ÿ≥ÿßÿ≤ŸÖÿßŸÜ€å (ÿ®ÿßŸÑÿß€å 500 Ÿáÿ≤ÿßÿ± ÿØ€åŸÜÿßÿ±)</SelectItem>
                              <SelectItem value="custom">ŸÇ€åŸÖÿ™ ŸÖÿÆÿµŸàÿµ</SelectItem>
                            </SelectContent>
                          </Select>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <FormField
                      control={form.control}
                      name="orderFrequency"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>ÿ™ŸÜÿßŸàÿ® ÿ≥ŸÅÿßÿ±ÿ¥</FormLabel>
                          <Select onValueChange={field.onChange} value={field.value}>
                            <FormControl>
                              <SelectTrigger>
                                <SelectValue placeholder="ÿßŸÜÿ™ÿÆÿßÿ® ÿ™ŸÜÿßŸàÿ® ÿ≥ŸÅÿßÿ±ÿ¥" />
                              </SelectTrigger>
                            </FormControl>
                            <SelectContent>
                              <SelectItem value="weekly">ŸáŸÅÿ™⁄Ø€å</SelectItem>
                              <SelectItem value="monthly">ŸÖÿßŸá€åÿßŸÜŸá</SelectItem>
                              <SelectItem value="quarterly">ŸÅÿµŸÑ€å</SelectItem>
                              <SelectItem value="yearly">ÿ≥ÿßŸÑÿßŸÜŸá</SelectItem>
                              <SelectItem value="as_needed">ÿ®ÿ± ÿßÿ≥ÿßÿ≥ ŸÜ€åÿßÿ≤</SelectItem>
                              <SelectItem value="seasonal">ŸÅÿµŸÑ€å</SelectItem>
                            </SelectContent>
                          </Select>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={form.control}
                      name="creditStatus"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Ÿàÿ∂ÿπ€åÿ™ ÿßÿπÿ™ÿ®ÿßÿ±</FormLabel>
                          <Select onValueChange={field.onChange} value={field.value}>
                            <FormControl>
                              <SelectTrigger>
                                <SelectValue placeholder="ÿßŸÜÿ™ÿÆÿßÿ® Ÿàÿ∂ÿπ€åÿ™ ÿßÿπÿ™ÿ®ÿßÿ±" />
                              </SelectTrigger>
                            </FormControl>
                            <SelectContent>
                              <SelectItem value="excellent">ÿπÿßŸÑ€å</SelectItem>
                              <SelectItem value="good">ÿÆŸàÿ®</SelectItem>
                              <SelectItem value="fair">ŸÖÿ™Ÿàÿ≥ÿ∑</SelectItem>
                              <SelectItem value="poor">ÿ∂ÿπ€åŸÅ</SelectItem>
                              <SelectItem value="no_credit">ÿ®ÿØŸàŸÜ ÿßÿπÿ™ÿ®ÿßÿ±</SelectItem>
                              <SelectItem value="pending">ÿØÿ± ÿßŸÜÿ™ÿ∏ÿßÿ± ÿ®ÿ±ÿ±ÿ≥€å</SelectItem>
                            </SelectContent>
                          </Select>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <FormField
                      control={form.control}
                      name="smsEnabled"
                      render={({ field }) => (
                        <FormItem className="flex flex-row items-start space-x-3 space-y-0">
                          <FormControl>
                            <input
                              type="checkbox"
                              checked={field.value}
                              onChange={field.onChange}
                              className="mt-2"
                            />
                          </FormControl>
                          <div className="space-y-1 leading-none">
                            <FormLabel>
                              ŸÅÿπÿßŸÑ‚Äåÿ≥ÿßÿ≤€å Ÿæ€åÿßŸÖ⁄©
                            </FormLabel>
                            <FormDescription>
                              ÿØÿ±€åÿßŸÅÿ™ ÿßÿ∑ŸÑÿßÿπ€åŸá‚ÄåŸáÿß Ÿà Ÿæ€åÿßŸÖ‚ÄåŸáÿß€å ŸÖŸáŸÖ ÿßÿ≤ ÿ∑ÿ±€åŸÇ Ÿæ€åÿßŸÖ⁄©
                            </FormDescription>
                          </div>
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={form.control}
                      name="emailEnabled"
                      render={({ field }) => (
                        <FormItem className="flex flex-row items-start space-x-3 space-y-0">
                          <FormControl>
                            <input
                              type="checkbox"
                              checked={field.value}
                              onChange={field.onChange}
                              className="mt-2"
                            />
                          </FormControl>
                          <div className="space-y-1 leading-none">
                            <FormLabel>
                              ŸÅÿπÿßŸÑ‚Äåÿ≥ÿßÿ≤€å ÿß€åŸÖ€åŸÑ
                            </FormLabel>
                            <FormDescription>
                              ÿØÿ±€åÿßŸÅÿ™ ÿßÿ∑ŸÑÿßÿπ€åŸá‚ÄåŸáÿß Ÿà ŸÅÿß⁄©ÿ™Ÿàÿ±Ÿáÿß ÿßÿ≤ ÿ∑ÿ±€åŸÇ ÿß€åŸÖ€åŸÑ
                            </FormDescription>
                          </div>
                        </FormItem>
                      )}
                    />
                  </div>
                </div>

                {/* Notes */}
                <div className="space-y-4">
                  <FormField
                    control={form.control}
                    name="notes"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>€åÿßÿØÿØÿßÿ¥ÿ™ Ÿáÿß€å ÿßÿ∂ÿßŸÅ€å</FormLabel>
                        <FormControl>
                          <Textarea {...field} placeholder="€åÿßÿØÿØÿßÿ¥ÿ™ Ÿáÿßÿå ŸÜ€åÿßÿ≤Ÿáÿß€å ÿÆÿßÿµÿå €åÿß ÿ™Ÿàÿ∂€åÿ≠ÿßÿ™ ÿßÿ∂ÿßŸÅ€å" rows={4} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>

                {/* Save Button */}
                <div className="flex gap-4 pt-6">
                  <Button 
                    type="submit" 
                    className="flex items-center gap-2 bg-blue-600 hover:bg-blue-700"
                    disabled={isCreateMode ? createCustomerMutation.isPending : updateProfileMutation.isPending}
                  >
                    <Save className="h-4 w-4" />
                    {isCreateMode 
                      ? (createCustomerMutation.isPending ? 'ÿØÿ± ÿ≠ÿßŸÑ ÿß€åÿ¨ÿßÿØ...' : 'ÿß€åÿ¨ÿßÿØ ŸÖÿ¥ÿ™ÿ±€å')
                      : (updateProfileMutation.isPending ? 'ÿØÿ± ÿ≠ÿßŸÑ ÿ∞ÿÆ€åÿ±Ÿá...' : 'ÿ∞ÿÆ€åÿ±Ÿá ÿ™ÿ∫€å€åÿ±ÿßÿ™')
                    }
                  </Button>
                  <Button 
                    type="button" 
                    variant="outline"
                    onClick={() => setLocation(isCreateMode || customerId ? "/admin/crm" : "/customer/profile")}
                  >
                    ÿßŸÜÿµÿ±ÿßŸÅ
                  </Button>
                </div>
              </form>
            </Form>
          </CardContent>
        </Card>
      </div>

      {/* SMS Verification Dialog */}
      <Dialog open={showSmsDialog} onOpenChange={setShowSmsDialog}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>ÿ™ÿ£€å€åÿØ ÿ¥ŸÖÿßÿ±Ÿá ÿ™ŸÑŸÅŸÜ</DialogTitle>
            <DialogDescription>
              ⁄©ÿØ ÿ™ÿ£€å€åÿØ ÿ®Ÿá ÿ¥ŸÖÿßÿ±Ÿá ÿ¨ÿØ€åÿØ ÿßÿ±ÿ≥ÿßŸÑ ÿ¥ÿØ. ŸÑÿ∑ŸÅÿßŸã ⁄©ÿØ ÿ±ÿß Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ.
            </DialogDescription>
          </DialogHeader>
          <Form {...smsForm}>
            <form onSubmit={smsForm.handleSubmit(onSmsVerify)} className="space-y-4">
              <FormField
                control={smsForm.control}
                name="code"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>⁄©ÿØ ÿ™ÿ£€å€åÿØ</FormLabel>
                    <FormControl>
                      <Input {...field} placeholder="⁄©ÿØ 4 ÿ±ŸÇŸÖ€å" maxLength={6} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <div className="flex gap-2">
                <Button type="submit" disabled={verifySmsAndUpdateMutation.isPending}>
                  {verifySmsAndUpdateMutation.isPending ? 'ÿØÿ± ÿ≠ÿßŸÑ ÿ™ÿ£€å€åÿØ...' : 'ÿ™ÿ£€å€åÿØ Ÿà ÿ∞ÿÆ€åÿ±Ÿá'}
                </Button>
                <Button type="button" variant="outline" onClick={() => setShowSmsDialog(false)}>
                  ÿßŸÜÿµÿ±ÿßŸÅ
                </Button>
              </div>
            </form>
          </Form>
        </DialogContent>
      </Dialog>
    </div>
  );
}
