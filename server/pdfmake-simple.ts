// Simple PDFMake Generator with minimal dependencies
const PdfMake = require('pdfmake');
import { vazirRegular, vazirBold } from './vazir-base64';

// Create printer instance
const printer = new PdfMake({
  Roboto: {
    normal: Buffer.from('', 'base64'), // We won't use this
    bold: Buffer.from('', 'base64'),
    italics: Buffer.from('', 'base64'),
    bolditalics: Buffer.from('', 'base64')
  },
  Vazir: {
    normal: Buffer.from(vazirRegular, 'base64'),
    bold: Buffer.from(vazirBold, 'base64'), 
    italics: Buffer.from(vazirRegular, 'base64'),
    bolditalics: Buffer.from(vazirBold, 'base64')
  }
});

export async function generateSimpleInvoicePDF(invoiceData: any): Promise<Buffer> {
  return new Promise((resolve, reject) => {
    try {
      console.log('üìÑ Generating invoice PDF with simple method...');
      
      // Create document definition
      const docDefinition = {
        content: [
          {
            text: 'ŸÅÿß⁄©ÿ™Ÿàÿ± ŸÅÿ±Ÿàÿ¥ - Momtaz Chem',
            style: 'header',
            alignment: 'center',
            margin: [0, 0, 0, 20]
          },
          {
            columns: [
              {
                text: [
                  { text: 'ÿ¥ŸÖÿßÿ±Ÿá ŸÅÿß⁄©ÿ™Ÿàÿ±: ', bold: true },
                  invoiceData.invoiceNumber || 'INV-001'
                ],
                alignment: 'right'
              },
              {
                text: [
                  { text: 'ÿ™ÿßÿ±€åÿÆ: ', bold: true },
                  new Date().toLocaleDateString('fa-IR')
                ],
                alignment: 'left'
              }
            ],
            margin: [0, 0, 0, 20]
          },
          {
            text: 'ŸÖÿ¥ÿÆÿµÿßÿ™ ŸÖÿ¥ÿ™ÿ±€å',
            style: 'subheader',
            margin: [0, 0, 0, 10]
          },
          {
            text: [
              { text: 'ŸÜÿßŸÖ: ', bold: true },
              invoiceData.customerName || 'ŸÜÿßŸÖÿ¥ÿÆÿµ'
            ],
            margin: [0, 0, 0, 5]
          },
          {
            text: [
              { text: 'ÿ™ŸÑŸÅŸÜ: ', bold: true },
              invoiceData.customerPhone || 'ŸÜÿßŸÖÿ¥ÿÆÿµ'
            ],
            margin: [0, 0, 0, 5]
          },
          {
            text: [
              { text: 'ÿß€åŸÖ€åŸÑ: ', bold: true },
              invoiceData.customerEmail || 'ŸÜÿßŸÖÿ¥ÿÆÿµ'
            ],
            margin: [0, 0, 0, 20]
          },
          {
            text: '⁄©ÿßŸÑÿßŸáÿß Ÿà ÿÆÿØŸÖÿßÿ™',
            style: 'subheader',
            margin: [0, 0, 0, 10]
          },
          {
            table: {
              headerRows: 1,
              widths: ['*', 'auto', 'auto', 'auto'],
              body: [
                [
                  { text: 'ÿ¥ÿ±ÿ≠ ⁄©ÿßŸÑÿß', style: 'tableHeader' },
                  { text: 'ÿ™ÿπÿØÿßÿØ', style: 'tableHeader' },
                  { text: 'ŸÇ€åŸÖÿ™ Ÿàÿßÿ≠ÿØ', style: 'tableHeader' },
                  { text: 'ŸÖÿ®ŸÑÿ∫ ⁄©ŸÑ', style: 'tableHeader' }
                ],
                ...((invoiceData.items || []).map((item: any) => [
                  item.name || 'ŸÜÿßŸÖÿ¥ÿÆÿµ',
                  item.quantity || '1',
                  (item.unitPrice || 0).toLocaleString('fa-IR') + ' ÿ±€åÿßŸÑ',
                  ((item.quantity || 1) * (item.unitPrice || 0)).toLocaleString('fa-IR') + ' ÿ±€åÿßŸÑ'
                ]))
              ]
            },
            layout: 'lightHorizontalLines',
            margin: [0, 0, 0, 20]
          },
          {
            columns: [
              { text: '', width: '*' },
              {
                table: {
                  body: [
                    [
                      { text: 'ŸÖÿ¨ŸÖŸàÿπ ⁄©ŸÑ:', bold: true, alignment: 'right' },
                      { text: (invoiceData.totalAmount || 0).toLocaleString('fa-IR') + ' ÿ±€åÿßŸÑ', bold: true, alignment: 'left' }
                    ]
                  ]
                },
                layout: 'noBorders',
                width: 'auto'
              }
            ]
          }
        ],
        styles: {
          header: {
            fontSize: 18,
            bold: true,
            font: 'Vazir'
          },
          subheader: {
            fontSize: 14,
            bold: true,
            font: 'Vazir',
            color: '#333'
          },
          tableHeader: {
            bold: true,
            fontSize: 11,
            color: 'white',
            fillColor: '#2563eb',
            alignment: 'center',
            font: 'Vazir'
          }
        },
        defaultStyle: {
          font: 'Vazir',
          fontSize: 10,
          direction: 'rtl'
        },
        pageMargins: [40, 60, 40, 60]
      };

      // Generate PDF
      const pdfDoc = printer.createPdfKitDocument(docDefinition);
      const chunks: Buffer[] = [];

      pdfDoc.on('data', (chunk: Buffer) => {
        chunks.push(chunk);
      });

      pdfDoc.on('end', () => {
        const result = Buffer.concat(chunks);
        console.log('‚úÖ PDF generated successfully, size:', result.length);
        resolve(result);
      });

      pdfDoc.on('error', (error: Error) => {
        console.error('‚ùå PDF generation error:', error);
        reject(error);
      });

      pdfDoc.end();
    } catch (error) {
      console.error('‚ùå Error in generateSimpleInvoicePDF:', error);
      reject(error);
    }
  });
}

export async function generateSimpleCustomerReportPDF(customerData: any, orders: any[] = []): Promise<Buffer> {
  return new Promise((resolve, reject) => {
    try {
      console.log('üìÑ Generating customer report PDF...');
      
      const docDefinition = {
        content: [
          {
            text: '⁄Øÿ≤ÿßÿ±ÿ¥ ŸÖÿ¥ÿ™ÿ±€å - Momtaz Chem',
            style: 'header',
            alignment: 'center',
            margin: [0, 0, 0, 20]
          },
          {
            text: 'ÿßÿ∑ŸÑÿßÿπÿßÿ™ ŸÖÿ¥ÿ™ÿ±€å',
            style: 'subheader',
            margin: [0, 0, 0, 10]
          },
          {
            text: [
              { text: 'ŸÜÿßŸÖ: ', bold: true },
              customerData.customerName || 'ŸÜÿßŸÖÿ¥ÿÆÿµ'
            ],
            margin: [0, 0, 0, 5]
          },
          {
            text: [
              { text: 'ÿß€åŸÖ€åŸÑ: ', bold: true },
              customerData.email || 'ŸÜÿßŸÖÿ¥ÿÆÿµ'
            ],
            margin: [0, 0, 0, 5]
          },
          {
            text: [
              { text: 'ÿ™ŸÑŸÅŸÜ: ', bold: true },
              customerData.phone || 'ŸÜÿßŸÖÿ¥ÿÆÿµ'
            ],
            margin: [0, 0, 0, 20]
          },
          {
            text: 'ÿ≥Ÿàÿßÿ®ŸÇ ÿ≥ŸÅÿßÿ±ÿ¥ÿßÿ™',
            style: 'subheader',
            margin: [0, 0, 0, 10]
          },
          {
            text: orders.length > 0 ? `ÿ™ÿπÿØÿßÿØ ÿ≥ŸÅÿßÿ±ÿ¥ÿßÿ™: ${orders.length}` : 'Ÿá€å⁄Ü ÿ≥ŸÅÿßÿ±ÿ¥€å €åÿßŸÅÿ™ ŸÜÿ¥ÿØ.',
            margin: [0, 0, 0, 10]
          }
        ],
        styles: {
          header: {
            fontSize: 18,
            bold: true,
            font: 'Vazir'
          },
          subheader: {
            fontSize: 14,
            bold: true,
            font: 'Vazir',
            color: '#333'
          }
        },
        defaultStyle: {
          font: 'Vazir',
          fontSize: 10,
          direction: 'rtl'
        },
        pageMargins: [40, 60, 40, 60]
      };

      // Generate PDF
      const pdfDoc = printer.createPdfKitDocument(docDefinition);
      const chunks: Buffer[] = [];

      pdfDoc.on('data', (chunk: Buffer) => {
        chunks.push(chunk);
      });

      pdfDoc.on('end', () => {
        const result = Buffer.concat(chunks);
        console.log('‚úÖ Customer report PDF generated successfully, size:', result.length);
        resolve(result);
      });

      pdfDoc.on('error', (error: Error) => {
        console.error('‚ùå PDF generation error:', error);
        reject(error);
      });

      pdfDoc.end();
    } catch (error) {
      console.error('‚ùå Error in generateSimpleCustomerReportPDF:', error);
      reject(error);
    }
  });
}